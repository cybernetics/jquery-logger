;(function($) {
  $.extend(/** @lends jQuery */ {
    /**
     * Provides the ability to log messages for debugging
     */
    logger: {
      /**
       * The possible levels that can be logged and their associated severity
       * values.
       */
      LEVELS: {
        /**
         * Low-level information for developers and no error catching
         */
        trace: 0,
        
        /**
         * Low-level information for developers
         */
        debug: 1,
        
        /**
         * Generic (useful) information about system operation
         */
        info: 2,
        
        /**
         * A warning
         */
        warn: 3,
        
        /**
         * A handleable error condition
         */
        error: 4,
        
        /**
         * Don't attempt console logging
         */
        off: 99
      },
      
      /**
       * The lowest level of logging to allow.  Messages below the given level will
       * be ignored
       * 
       * @type Number
       * @default 0
       */
      level: 0,

      /**
       * The environment that messages are being logged in.  This can be any
       * string, but is usually one of the following:
       * * test
       * * development
       * * qa
       * * staging
       * * production
       * 
       * @type String
       * @default "production"
       */
      environment: 'production',

      /**
       * A list of environments names that are considered "development" and so
       * won't result in data being sent to the remote url service (if configured).
       * 
       * @type String[]
       * @default ["test", "development"]
       */
      developmentEnvironments: ['test', 'development'],
      
      /**
       * The remote service to log messages to.  This should only be used in a
       * production environment where problems are more difficult to discover.
       */
      service: {
        /**
         * The url of the remote service
         * 
         * @type String
         */
        url: null,

        /**
         * The http method to use when making requests to the service
         * 
         * @type String
         * @default "post"
         */
        method: 'post',

        /**
         * The level at which to log messages to the service
         * 
         * @type Number
         * @default 4
         */
        level: 4
      },

      /**
       * The target window for writing log messages to
       * 
       * @type Document
       */
      window: window,
      
      /**
       * The browser console, if available
       */
      console: window.console,

      /**
       * The domain that has been set on the document.  This ensures that any
       * iframes generated by this plugin are also in the same domain.
       * 
       * @type String
       */
      domain: null,
      
      /**
       * Additional context to add to each error logged to a remote server
       * 
       * @type Object
       */
      context: {},
      
      /**
       * Tracks the messages that are encountered for each severity level
       */
      messages: {
        debug: {},
        info: {},
        warn: {},
        error: {},
        onerror: {}
      },

      /**
       * A collection of the filters used to ignore certain exceptions when
       * reporting to the service url configured for the logger
       */
      filters: {
        /**
         * A list of user agents to ignore.  This will include partial matches.
         * 
         * @type String[]
         */
        userAgents: [],

        /**
         * A list of messages to ignore.  This will include partial matches.
         * 
         * @type String[]
         */
        messages: []
      },

      /**
       * Global callback to invoke when an error occurs
       * 
       * @type Function
       */
      onerror: null,

      /**
       * Configuration settings for Firebug Lite 
       */
      firebugLite: {
        /**
         * Whether to use firebug lite
         * 
         * @type Boolean
         * @default true
         */
        enabled: true,

        /**
         * The url for integrating Firebug Lite
         * 
         * @type String
         * @default "http://getfirebug.com/firebug-lite.js"
         */
        url: 'https://getfirebug.com/firebug-lite.js',
        
        /**
         * Whether the library is being loaded
         * 
         * @type Boolean
         * @default false
         */
        loading: false
      },
      
      /**
       * Wraps a function in order to catch any errors and report them.
       */
      fn: function(fn, data) {
        return function() {
          if ($.logger.level == $.logger.LEVELS.trace) {
            return fn.apply(this, arguments);
          } else {
            try {
              return fn.apply(this, arguments);
            } catch (ex) {
              if (!ex || typeof(ex) !== 'object' && !$.isFunction(ex)) {
                ex = new Error(ex);
              }

              var args = [];
              args.push.apply(args, arguments);

              // Add custom data to the exception
              ex.customData = $.extend({}, ex.customData, data, {
                handler: fn,
                arguments: args
              });

              // Log the error
              $.logger.error(ex);
            }
          }
        };
      },
      
      /**
       * Logs a debug message
       * 
       * @see jQuery.logger.add
       * @param {String} message The content to log
       * @return this
       */
      debug: function(message) {
        return this.add('debug', message);
      },
      
      /**
       * Logs an info message
       * 
       * @see jQuery.logger.add
       * @param {String} message The content to log
       * @return this
       */
      info: function(message) {
        return this.add('info', message);
      },
      
      /**
       * Logs a warn message
       * 
       * @param {String} message The content to log
       * @see jQuery.logger.add
       */
      warn: function(message) {
        return this.add('warn', message);
      },
      
      /**
       * Logs an error message
       * 
       * @see jQuery.logger.add
       * @param {String} message The content to log
       * @return this
       */
      error: function(message) {
        return this.add('error', message);
      },
            
      /**
       * Logs a message if the given severity is high enough.  This is the low-level
       * logging implementation and should be avoided in favor of calling the
       * actual severity helper methods themselves.
       * 
       * @param {String} severity The severity level of the message (debug, info, warn, or error)
       * @param {String} message The content to log
       */
      add: function(severity, message) {
        var level = $.logger.LEVELS[severity];
        
        // Write the message to the page if it's above the lowest severity level
        if (level >= this.level) {
          write(writeToPage, severity, message);
        }

        // Write anything with an error level or higher to a remote service url
        // only if there's an associated url and we're not filtering the message
        if (level >= this.service.level && this.service.url && !this.filter(message)) {
          write(writeToURL, severity, message);
        }
        
        // Call the global error handler
        if (level >= $.logger.LEVELS.error && $.logger.onerror && !this.filter(message)) {
          $.logger.onerror(this.messageToObject(severity, message));
        }
        
        return this;
      },

      /**
       * Attempts to filter the given message
       * 
       * @param message The message to filter
       * @return {Boolean} True if the message should be filtered, otherwise false
       */
      filter: function(message) {
        var name = (message.message || message).toString().toLowerCase();
        
        var filters = [
          // Filters messages that are in a development environment
          function() {
            return $.inArray($.logger.environment, $.logger.developmentEnvironments) >= 0;
          },
          
          // Filter messages that explicitly don't allow logging
          function() {
            return message.log == false;
          },

          // Filter messages that occurs on user agents that are ignored
          function() {
            var userAgent = navigator.userAgent.toLowerCase();
            
            for (var i = 0; i < $.logger.filters.userAgents.length; i++) {
              if (userAgent.indexOf($.logger.filters.userAgents[i].toLowerCase()) >= 0) {
                return true;
              }
            }
          },

          // Filter messages that have a name that match a set of predefined ones
          function() {
            for (var i = 0; i < $.logger.filters.messages.length; i++) {
              if (name.indexOf($.logger.filters.messages[i].toLowerCase()) >= 0) {
                return true;
              }
            }
          }
        ];

        // Check each of the filters, looking for one that matches the given
        // message
        var filtered = false;
        for (var i = 0; i < filters.length; i++) {
          if (filters[i]()) {
            filtered = true;
            break;
          }
        }

        return filtered;
      },

      /**
       * Converts the given message to an object
       * 
       * @param {String} severity The severity level of the message
       * @param message The content being logged
       * @return {Object} An object with a customData property
       */
      messageToObject: function(severity, message) {
        // Generate the default data to associate with dynamically-defined
        // properties evaluated
        var defaultData = $.extend({}, $.logger.context);
        for (var property in defaultData) {
          var value = defaultData[property];
          if ($.type(value) == 'function') {
            // Evaluate dynamica property
            defaultData[property] = value();
          }
        }

        // Generate custom data to associate
        var customData = $.extend({severity: severity, error_type: message.errorType}, defaultData, message.customData);
        for (var property in customData) {
          var value = customData[property];
          if (value && $.type(value) != 'string') {
            // Serialize object as a string
            customData[property] = $.serialize ? $.serialize(value, false) : value.toString();
          }
        }

        var object = {customData: customData};
        if ($.type(message) == 'string') {
          $.extend(object, {message: message});
        } else {
          $.extend(object, {
            fileName: message.fileName,
            lineNumber: message.lineNumber,
            message: message.message,
            stack: message.customData && message.customData.filter ? undefined : message.stack
          });
        }
        
        return object;
      },

      /**
       * Formats the given message for being written to an element on the page.
       * 
       * @param {String} severity The severity level of the message
       * @param message The content to log
       * @return {String} The formatted message text
       */
      formatMessageForPage: function(severity, message) {
        var messageData = this.messageToObject(severity, message);
        var data = $.param(messageData.customData);

        return messageData.message + (data ? ' (' + data + ')' : '');
      },

      /**
       * Formats the given message for being written to a url.
       * 
       * @param {String} severity The severity level of the message
       * @param message The content to log
       * @return {Object} A hash of query parameters
       */
      formatMessageForURL: function(severity, message) {
        var messageData = this.messageToObject(severity, message);
        $.extend(messageData, messageData.customData);
        delete messageData.customData;

        return messageData;
      }
    }
  });
  
  // Keep track of pending log writes
  var buffer = [];
  
  /**
   * Writes a message to the given handler.  A handler could be one of the
   * following:
   * * A remote service url
   * * The DOM
   * * The browser's debugging console
   * 
   * @param {Function} handler The handler to write the message to
   * @param {String} severity The severity level of the message
   * @param message The content to log
   * @private
   */
  function write(handler, severity, message) {
    buffer.push({handler: handler, severity: severity, message: message});
    
    var timer = setInterval(function() {
      // Only start writing to the log if there aren't any animations in process
      // since log-writing is blocking I/O
      if (!$.timers || $.timers.length == 0) {
        clearInterval(timer);
        
        var logs = buffer;
        buffer = [];
        var i = 0;
        
        // Write each log entry with a wait time between each write so that the
        // user interface is responsive during writes
        var innerTimer = setInterval(function() {
          if (i < logs.length) {
            var log = logs[i];
            var handler = log.handler;
            var severity = log.severity;
            var message = log.message;

            i += 1;
            
            handler(severity, message);
          } else {
            clearInterval(innerTimer);
          }
        }, 1);
      }
    }, 13);
  }
  
  /**
   * Writes the given message to the console.  If the console doesn't support
   * display different severity levels, then the generic "log" function will
   * be called.
   * 
   * @param {String} severity The severity level of the message
   * @param message The content to log
   * @private
   */
  var writeToConsole = function(severity, message) {
    var messageText = $.logger.formatMessageForPage(severity, message);
    if ($.logger.console[severity]) {
      $.logger.console[severity](messageText);
    } else {
      $.logger.console.log(messageText);
    }
  };
  
  /**
   * Writes the given message to the console.  If the console isn't available and
   * Firebug Lite is not enabled, then no logger output will be available on the
   # page.
   * 
   * @param {String} severity The severity level of the message
   * @param {String} message The content to log
   * @private
   */
  var consoleDefined = typeof($.logger.console) != 'undefined';
  function writeToPage(severity, message) {
    if (consoleDefined) {
      // Console is available: write to it
      writeToPage = writeToConsole;
      writeToPage(severity, message);
    } else if ($.logger.firebugLite.enabled) {
      // Load Firebug
      if (!$.logger.firebugLite.loading) {
        $.logger.firebugLite.loading = true;
        var originalCache = $.ajaxSettings.cache;
        $.ajaxSettings.cache = true;

        // Make sure to undefine any existing console from the window so that it
        // can get replaced by firebug lite
        if ($.logger.window.console) {
          $.logger.window.console = undefined;
        }
        var script = $('<script />', $.logger.window.document)
          .attr({src: $.logger.firebugLite.url})
          .load(function() {
            // Firebug lite has completed loading
            writeToPage = writeToConsole;
          });

        // Can't seem to get the script properly inserted in a dynamically
        // generated iframe on IE7 using straight-up jQuery, so reverting to the
        // typical insertion technique here.
        var head = $.logger.window.document.getElementsByTagName('head')[0];
        head.insertBefore(script[0], head.firstChild);
        
        $.ajaxSettings.cache = originalCache;
      }
      
      // Push the message back onto the buffer since Firebug Lite isn't available
      // to be written to yet.
      buffer.push({handler: writeToPage, severity: severity, message: message});
    }
  }
  
  /**
   * Writes the given message to a remote service url.  If the message has
   * already been encountered, then it will be ignored.
   * 
   * @param {String} severity The severity level of the message
   * @param {String} message The content to log
   * @private
   */
  function writeToURL(severity, message) {
    var params = $.logger.formatMessageForURL(severity, message);
    
    if (!$.logger.messages[severity][params.message]) {
      $.logger.messages[severity][params.message] = true;

      // Generate the frame transport that will allow us to submit the exception
      // to the url
      $.fn.ready(function() {
        var $transport = $('<iframe />').css({display: 'none'});
        if ($.browser.msie && $.logger.domain) {
          $transport.attr({src: 'javascript:(function(){\
            document.open();\
            document.domain = "' + $.logger.domain + '";\
            document.write("<!DOCTYPE html><html><head></head><body></body></html>");\
            document.close();\
          })()'});
        }
        $transport.appendTo('body');

        // Need to do this asynchronously after the iframe is processed for this
        // to work in IE
        setTimeout(function() {
          // Generate the form / parameters to post
          var frameDocument = $transport.contents();
          var $form = $('<form />', frameDocument)
            .attr({action: $.logger.service.url, method: $.logger.service.method})
            .appendTo($('body', frameDocument));
          
          for (var param in params) {
            var value = params[param];
            value = $.isFunction(value) ? value() : value;
            
            $('<input />').attr({name: param, value: value}).appendTo($form);
          }

          // Submit the request
          $form.submit();
        }, 1);
      });
    }
  }
})(jQuery);
